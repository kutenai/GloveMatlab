<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
                "http://www.w3.org/TR/REC-html40/loose.dtd">
<html>
<head>
  <title>Description of rne_mdh</title>
  <meta name="keywords" content="rne_mdh">
  <meta name="description" content="RNE_MDH Compute inverse dynamics via recursive Newton-Euler formulation">
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
  <meta name="generator" content="m2html &copy; 2003 Guillaume Flandin">
  <meta name="robots" content="index, follow">
  <link type="text/css" rel="stylesheet" href="../m2html.css">
</head>
<body>
<a name="_top"></a>
<div><a href="../index.html">Home</a> &gt;  <a href="#">@robot</a> &gt; rne_mdh.m</div>

<!--<table width="100%"><tr><td align="left"><a href="../index.html"><img alt="<" border="0" src="../left.png">&nbsp;Master index</a></td>
<td align="right"><a href="index.html">Index for ./@robot&nbsp;<img alt=">" border="0" src="../right.png"></a></td></tr></table>-->

<h1>rne_mdh
</h1>

<h2><a name="_name"></a>PURPOSE <a href="#_top"><img alt="^" border="0" src="../up.png"></a></h2>
<div class="box"><strong>RNE_MDH Compute inverse dynamics via recursive Newton-Euler formulation</strong></div>

<h2><a name="_synopsis"></a>SYNOPSIS <a href="#_top"><img alt="^" border="0" src="../up.png"></a></h2>
<div class="box"><strong>function tau = rne_mdh(robot, a1, a2, a3, a4, a5) </strong></div>

<h2><a name="_description"></a>DESCRIPTION <a href="#_top"><img alt="^" border="0" src="../up.png"></a></h2>
<div class="fragment"><pre class="comment">RNE_MDH Compute inverse dynamics via recursive Newton-Euler formulation

    TAU = RNE(ROBOT, Q, QD, QDD)
    TAU = RNE(ROBOT, [Q QD QDD])

 Returns the joint torque required to achieve the specified joint position,
 velocity and acceleration state.

 Gravity vector is an attribute of the robot object but this may be 
 overriden by providing a gravity acceleration vector [gx gy gz].

    TAU = RNE(ROBOT, Q, QD, QDD, GRAV)
    TAU = RNE(ROBOT, [Q QD QDD], GRAV)

 An external force/moment acting on the end of the manipulator may also be
 specified by a 6-element vector [Fx Fy Fz Mx My Mz].

    TAU = RNE(ROBOT, Q, QD, QDD, GRAV, FEXT)
    TAU = RNE(ROBOT, [Q QD QDD], GRAV, FEXT)

 where Q, QD and QDD are row vectors of the manipulator state; pos, vel, 
 and accel.

 The torque computed also contains a contribution due to armature
 inertia.

 RNE can be either an M-file or a MEX-file.  See the manual for details on
 how to configure the MEX-file.  The M-file is a wrapper which calls either
 RNE_DH or RNE_MDH depending on the kinematic conventions used by the robot
 object.

 See also: <a href="robot.html" class="code" title="function r = robot(L, a1, a2, a3)">ROBOT</a>, ACCEL, GRAVLOAD, INERTIA.</pre></div>

<!-- crossreference -->
<h2><a name="_cross"></a>CROSS-REFERENCE INFORMATION <a href="#_top"><img alt="^" border="0" src="../up.png"></a></h2>
This function calls:
<ul style="list-style-image:url(../matlabicon.gif)">
<li><a href="friction.html" class="code" title="function  tau = friction(robot, qd)">friction</a>	FRICTION Compute friction torque for a ROBOT object</li></ul>
This function is called by:
<ul style="list-style-image:url(../matlabicon.gif)">
<li><a href="rne.html" class="code" title="function tau = rne(robot, varargin)">rne</a>	RNE Compute inverse dynamics via recursive Newton-Euler formulation</li></ul>
<!-- crossreference -->


<h2><a name="_source"></a>SOURCE CODE <a href="#_top"><img alt="^" border="0" src="../up.png"></a></h2>
<div class="fragment"><pre>0001 <span class="comment">%RNE_MDH Compute inverse dynamics via recursive Newton-Euler formulation</span>
0002 <span class="comment">%</span>
0003 <span class="comment">%    TAU = RNE(ROBOT, Q, QD, QDD)</span>
0004 <span class="comment">%    TAU = RNE(ROBOT, [Q QD QDD])</span>
0005 <span class="comment">%</span>
0006 <span class="comment">% Returns the joint torque required to achieve the specified joint position,</span>
0007 <span class="comment">% velocity and acceleration state.</span>
0008 <span class="comment">%</span>
0009 <span class="comment">% Gravity vector is an attribute of the robot object but this may be</span>
0010 <span class="comment">% overriden by providing a gravity acceleration vector [gx gy gz].</span>
0011 <span class="comment">%</span>
0012 <span class="comment">%    TAU = RNE(ROBOT, Q, QD, QDD, GRAV)</span>
0013 <span class="comment">%    TAU = RNE(ROBOT, [Q QD QDD], GRAV)</span>
0014 <span class="comment">%</span>
0015 <span class="comment">% An external force/moment acting on the end of the manipulator may also be</span>
0016 <span class="comment">% specified by a 6-element vector [Fx Fy Fz Mx My Mz].</span>
0017 <span class="comment">%</span>
0018 <span class="comment">%    TAU = RNE(ROBOT, Q, QD, QDD, GRAV, FEXT)</span>
0019 <span class="comment">%    TAU = RNE(ROBOT, [Q QD QDD], GRAV, FEXT)</span>
0020 <span class="comment">%</span>
0021 <span class="comment">% where Q, QD and QDD are row vectors of the manipulator state; pos, vel,</span>
0022 <span class="comment">% and accel.</span>
0023 <span class="comment">%</span>
0024 <span class="comment">% The torque computed also contains a contribution due to armature</span>
0025 <span class="comment">% inertia.</span>
0026 <span class="comment">%</span>
0027 <span class="comment">% RNE can be either an M-file or a MEX-file.  See the manual for details on</span>
0028 <span class="comment">% how to configure the MEX-file.  The M-file is a wrapper which calls either</span>
0029 <span class="comment">% RNE_DH or RNE_MDH depending on the kinematic conventions used by the robot</span>
0030 <span class="comment">% object.</span>
0031 <span class="comment">%</span>
0032 <span class="comment">% See also: ROBOT, ACCEL, GRAVLOAD, INERTIA.</span>
0033 <span class="comment">%</span>
0034 
0035 <span class="comment">% Copyright (C) 1995-2008, by Peter I. Corke</span>
0036 <span class="comment">%</span>
0037 <span class="comment">% This file is part of The Robotics Toolbox for Matlab (RTB).</span>
0038 <span class="comment">%</span>
0039 <span class="comment">% RTB is free software: you can redistribute it and/or modify</span>
0040 <span class="comment">% it under the terms of the GNU Lesser General Public License as published by</span>
0041 <span class="comment">% the Free Software Foundation, either version 3 of the License, or</span>
0042 <span class="comment">% (at your option) any later version.</span>
0043 <span class="comment">%</span>
0044 <span class="comment">% RTB is distributed in the hope that it will be useful,</span>
0045 <span class="comment">% but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
0046 <span class="comment">% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
0047 <span class="comment">% GNU Lesser General Public License for more details.</span>
0048 <span class="comment">%</span>
0049 <span class="comment">% You should have received a copy of the GNU Leser General Public License</span>
0050 <span class="comment">% along with RTB.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>
0051 
0052 <a name="_sub0" href="#_subfunctions" class="code">function tau = rne_mdh(robot, a1, a2, a3, a4, a5)</a>
0053 
0054     z0 = [0;0;1];
0055     grav = robot.gravity;    <span class="comment">% default gravity from the object</span>
0056     fext = zeros(6, 1);
0057 
0058     <span class="comment">% Set debug to:</span>
0059     <span class="comment">%    0 no messages</span>
0060     <span class="comment">%    1 display results of forward and backward recursions</span>
0061     <span class="comment">%    2 display print R and p*</span>
0062     debug = 0;
0063 
0064     n = robot.n;
0065     <span class="keyword">if</span> numcols(a1) == 3*n,
0066         Q = a1(:,1:n);
0067         Qd = a1(:,n+1:2*n);
0068         Qdd = a1(:,2*n+1:3*n);
0069         np = numrows(Q);
0070         <span class="keyword">if</span> nargin &gt;= 3,    
0071             grav = a2(:);
0072         <span class="keyword">end</span>
0073         <span class="keyword">if</span> nargin == 4,
0074             fext = a3;
0075         <span class="keyword">end</span>
0076     <span class="keyword">else</span>
0077         np = numrows(a1);
0078         Q = a1;
0079         Qd = a2;
0080         Qdd = a3;
0081         <span class="keyword">if</span> numcols(a1) ~= n | numcols(Qd) ~= n | numcols(Qdd) ~= n | <span class="keyword">...</span>
0082             numrows(Qd) ~= np | numrows(Qdd) ~= np,
0083             error(<span class="string">'bad data'</span>);
0084         <span class="keyword">end</span>
0085         <span class="keyword">if</span> nargin &gt;= 5,    
0086             grav = a4(:);
0087         <span class="keyword">end</span>
0088         <span class="keyword">if</span> nargin == 6,
0089             fext = a5;
0090         <span class="keyword">end</span>
0091     <span class="keyword">end</span>
0092     
0093     tau = zeros(np,n);
0094 
0095     <span class="keyword">for</span> p=1:np,
0096         q = Q(p,:)';
0097         qd = Qd(p,:)';
0098         qdd = Qdd(p,:)';
0099     
0100         Fm = [];
0101         Nm = [];
0102         pstarm = [];
0103         Rm = [];
0104         w = zeros(3,1);
0105         wd = zeros(3,1);
0106         v = zeros(3,1);
0107         vd = grav(:);
0108 
0109     <span class="comment">%</span>
0110     <span class="comment">% init some variables, compute the link rotation matrices</span>
0111     <span class="comment">%</span>
0112         <span class="keyword">for</span> j=1:n,
0113             link = robot.link{j};
0114             Tj = link(q(j));
0115             <span class="keyword">if</span> link.RP == <span class="string">'R'</span>,
0116                 D = link.D;
0117             <span class="keyword">else</span>
0118                 D = q(j);
0119             <span class="keyword">end</span>
0120             alpha = link.alpha;
0121             pm = [link.A; -D*sin(alpha); D*cos(alpha)];    <span class="comment">% (i-1) P i</span>
0122             <span class="keyword">if</span> j == 1,
0123                 pm = t2r(robot.base) * pm;
0124                 Tj = robot.base * Tj;
0125             <span class="keyword">end</span>
0126             Pm(:,j) = pm;
0127             Rm{j} = t2r(Tj);
0128             <span class="keyword">if</span> debug&gt;1,
0129                 Rm{j}
0130                 Pm(:,j)'
0131             <span class="keyword">end</span>
0132         <span class="keyword">end</span>
0133 
0134     <span class="comment">%</span>
0135     <span class="comment">%  the forward recursion</span>
0136     <span class="comment">%</span>
0137         <span class="keyword">for</span> j=1:n,
0138             link = robot.link{j};
0139 
0140             R = Rm{j}';    <span class="comment">% transpose!!</span>
0141             P = Pm(:,j);
0142             Pc = link.r;
0143 
0144             <span class="comment">%</span>
0145             <span class="comment">% trailing underscore means new value</span>
0146             <span class="comment">%</span>
0147             <span class="keyword">if</span> link.RP == <span class="string">'R'</span>,
0148                 <span class="comment">% revolute axis</span>
0149                 w_ = R*w + z0*qd(j);
0150                 wd_ = R*wd + cross(R*w,z0*qd(j)) + z0*qdd(j);
0151                 <span class="comment">%v = cross(w,P) + R*v;</span>
0152                 vd_ = R * (cross(wd,P) + <span class="keyword">...</span>
0153                     cross(w, cross(w,P)) + vd);
0154 
0155             <span class="keyword">else</span>
0156                 <span class="comment">% prismatic axis</span>
0157                 w_ = R*w;
0158                 wd_ = R*wd;
0159                 <span class="comment">%v = R*(z0*qd(j) + v) + cross(w,P);</span>
0160                 vd_ = R*(cross(wd,P) + <span class="keyword">...</span>
0161                     cross(w, cross(w,P)) + vd <span class="keyword">...</span>
0162                       ) + 2*cross(R*w,z0*qd(j)) + z0*qdd(j);
0163             <span class="keyword">end</span>
0164             <span class="comment">% update variables</span>
0165             w = w_;
0166             wd = wd_;
0167             vd = vd_;
0168 
0169             vdC = cross(wd,Pc) + <span class="keyword">...</span>
0170                 cross(w,cross(w,Pc)) + vd;
0171             F = link.m*vdC;
0172             N = link.I*wd + cross(w,link.I*w);
0173             Fm = [Fm F];
0174             Nm = [Nm N];
0175             <span class="keyword">if</span> debug,
0176                 fprintf(<span class="string">'w: '</span>); fprintf(<span class="string">'%.3f '</span>, w)
0177                 fprintf(<span class="string">'\nwd: '</span>); fprintf(<span class="string">'%.3f '</span>, wd)
0178                 fprintf(<span class="string">'\nvd: '</span>); fprintf(<span class="string">'%.3f '</span>, vd)
0179                 fprintf(<span class="string">'\nvdbar: '</span>); fprintf(<span class="string">'%.3f '</span>, vdC)
0180                 fprintf(<span class="string">'\n'</span>);
0181             <span class="keyword">end</span>
0182         <span class="keyword">end</span>
0183 
0184     <span class="comment">%</span>
0185     <span class="comment">%  the backward recursion</span>
0186     <span class="comment">%</span>
0187 
0188         fext = fext(:);
0189         f = fext(1:3);        <span class="comment">% force/moments on end of arm</span>
0190         nn = fext(4:6);
0191 
0192         <span class="keyword">for</span> j=n:-1:1,
0193             
0194             <span class="comment">%</span>
0195             <span class="comment">% order of these statements is important, since both</span>
0196             <span class="comment">% nn and f are functions of previous f.</span>
0197             <span class="comment">%</span>
0198             link = robot.link{j};
0199             
0200             <span class="keyword">if</span> j == n,
0201                 R = eye(3,3);
0202                 P = [0;0;0];
0203             <span class="keyword">else</span>
0204                 R = Rm{j+1};
0205                 P = Pm(:,j+1);        <span class="comment">% i/P/(i+1)</span>
0206             <span class="keyword">end</span>
0207             Pc = link.r;
0208             
0209             f_ = R*f + Fm(:,j);
0210             nn_ = Nm(:,j) + R*nn + cross(Pc,Fm(:,j)) + <span class="keyword">...</span>
0211                 cross(P,R*f);
0212             
0213             f = f_;
0214             nn = nn_;
0215 
0216             <span class="keyword">if</span> debug,
0217                 fprintf(<span class="string">'f: '</span>); fprintf(<span class="string">'%.3f '</span>, f)
0218                 fprintf(<span class="string">'\nn: '</span>); fprintf(<span class="string">'%.3f '</span>, nn)
0219                 fprintf(<span class="string">'\n'</span>);
0220             <span class="keyword">end</span>
0221             <span class="keyword">if</span> link.RP == <span class="string">'R'</span>,
0222                 <span class="comment">% revolute</span>
0223                 tau(p,j) = nn'*z0 + <span class="keyword">...</span>
0224                     link.G^2 * link.Jm*qdd(j) + <span class="keyword">...</span>
0225                     link.G * <a href="friction.html" class="code" title="function  tau = friction(robot, qd)">friction</a>(link, qd(j));
0226             <span class="keyword">else</span>
0227                 <span class="comment">% prismatic</span>
0228                 tau(p,j) = f'*z0 + <span class="keyword">...</span>
0229                     link.G^2 * link.Jm*qdd(j) + <span class="keyword">...</span>
0230                     link.G * <a href="friction.html" class="code" title="function  tau = friction(robot, qd)">friction</a>(link, qd(j));
0231             <span class="keyword">end</span>
0232         <span class="keyword">end</span>
0233     <span class="keyword">end</span></pre></div>
<hr><address>Generated on Sun 15-Feb-2009 18:09:29 by <strong><a href="http://www.artefact.tk/software/matlab/m2html/">m2html</a></strong> &copy; 2003</address>
</body>
</html>